퍼블리셔
-HTML은 정보 전달이라는 목적을 가진 웹 페이지
-정보를 원하는 사람들에게 정보를 효과적으로 정확하게 전달하려면? 
 웹 페이지를 작성하는 사람이 정확하게 파악하고 정보를 구조적으로 표현할 수 있게 작업
-웹 퍼블리셔는 단순히 디자이너가 만든 웹 페이지를 그대로 웹 브라우저로 옮기는 일만 하지는 않음
-웹 퍼블리셔는 컨텐츠를 다루는 사람 / 웹 페이지에서 전달하려는 내용을 제대로 해석하고 그 컨텐츠 해석에 맞게 HTML, CSS, JS를 활용하는 컨텐츠 전문가
-웹 페이지 속 컨텐츠를 잘 해석해 제대로 된 시맨틱한 마크업이 이뤄지고 검색엔진(네이버, 구글)에 최적화된 페이지를 만들어서 본래 의도했던 기획 의도에 맞는 웹 사이트를 만들 수 있음
-사용자와의 사용성도 고려 -> UI/UX
-퍼블리셔는 사이트를 제작할 때 기획, 디자인, 웹 개발까지 모두 아우르면서 작업해야하기때문에 그 포지션이 매우 중요!!!
-퍼블리셔가 되려면 기술적으로는 포토샵, 일러스트, HTML, CSS, JS, Jquery를 배워야 하지만 사용자의 사용성도 고려해야하므로 UI도 많이 신경써야 함
-한 때 특별한 키워드처럼 붐이었던 UI/UX도 깊게 공부를 해야함

웹 기술의 범위가 넓어지고 있음 -> 모바일, e-book, 스마트TV 등 UI를 고려해야하는 상황들이 많아지고 있음
예전의 웹디자이너와 지금의 웹 디자이너는 비교할 수 없을 정도로 전문성을 가지고 있음
앞으로 공부를 해 나가고 진로를 결정할 때 나한테 맞는 방향으로 선택해서 결정
정확한 컨텐츠 마크업, 검색 엔진 최적화에 중점을 둔 페이지를 만드는 데 집중 (퍼블리셔)
사용자와 브라우저 간의 전달 방식, 즉 UI에 전문성을 두고 자바스크립트에 집중 (프론트엔드개발자)
웹 퍼블리셔란 말이 나온 후 퍼블리셔가 어디까지 작업을 해야하는지, 퍼블리셔가 JS까지 작업을 해야 하는 지에 대한 여부와 사용자 인터페이스(UI)에 대한 역할 분담 및 작업 범위에 대한 논란이 많음
내가 어디까지 할 수 있닥 범위를 지정하고 일하지 말고 내가 할 수 있는 것들을 계속 활용 발전
퍼블리셔 -> 웹의 전반을 알고 웹 중심에서 일하는 사람

dbcut awwards 사이트들 참고


1. 반응형 웹
-패턴들...

2. 플랫 디자인
-스큐어모피즘 디자인
-머티리얼 디자인
-카드형 디자인

3. 그리드 레이아웃 디자인

4. 원페이지 사이트
-패럴랙스 스크롤링

5. 풀스크린 배경
-고스트 버튼
-캐러셀

6. 타이포그래피



1. 반응형 웹
반응형 웹이 필요한 사이트
- 사이트의 용도와 사용자들이 주로 어떤 기기로 접속하는지 파악
- 앱애니, 와이즈앱 등

포털사이트(네이버, 다음...)나 쇼핑몰 사이트처럼 사용자가 모바일 기기로 접속하는 경우가 많거나 터치, GPS같은 모바일 기능이 중요한 사이트라면 반응형 웹보다는 모바일 전용 사이트를 따로 만드는게 나음
PC, 모바일 사용자의 접속 빈도가 비슷할 때 반응형 웹이 적절함!

반응형 웹 페이지를 만드는 노하우
1. 살짝 수정 -> 반응형 웹의 가장 간단한 형태 / 화면 너비에 따라 글자 크기나 이미지 크기만 변하도록 하는 것 / 레이아웃은 변하지 않고 컨텐츠의 크기만 바뀌는 것 ( brunch.co.kr )
2. 유동형 패턴 -> 레이아웃은 그대로 유지하면서 컨텐츠의 크기를 조절 (strongegg.com 고급눌러서 안전하지 않은 이동)
3. 칼럼 드롭 패턴 -> 여러 칼럼으로 구성된 레이아웃에서 사용하는 패턴 / 화면 너비가 좁아지면 칼럼들이 아래로 떨어지도록 구성(화면이 좁아지면 화면을 벗어나는 칼럼은 다음 줄로 이동) (핀터레스트)
4. 레이아웃 이동 패턴 -> 칼럼 드롭 패턴과 비슷하지만 화면 크기에 따라서 레이아웃을 다양하게 만드는 형태(www.kwater.or.kr)
5. 캔버스 밖으로 패턴 -> 반응형 웹 디자인을 모바일 화면에 맞게 적용하다 보면 컨텐츠들을 하나씩 수직으로 쌓게 됨 / 컨텐츠가 많을 때 작은 모바일 화면에서 다 담으려고 하면 세로 스크롤이 너무 길어짐 / 일부 컨텐츠들을 화면 밖에 감춰뒀다가 사용자가 필요할 때 꺼내오는 패턴 (nia.or.kr)

반응형 웹은 어떻게 만들까? 미디어쿼리를 사용하면 됨 / 부트스트랩을 사용해도 됨 (부트스트랩은 참고를 하는 용)
theborn.co.kr 개발자모드 -> 미디어쿼리 -> 파란색막대(max-width 조건) / 녹색막대(max-width, min-width 조건) / 주황막대(min-width 조건)



2. 플랫 디자인(https://flatuicolors.com/)
납작하다 -> 디자인에서는 깊이(depth)를 제거해 입체감을 없앴다는 의미
깊이 -> 그림자, 경사, 그라뎅이션 등 컨텐츠를 입체적으로 보이기 위해 사용하는 여러 가지 시각 효과
플랫 디자인 -> 컨텐츠에 입체감을 주는 시각 효과를 제거하고 단순하게 표현하는 기법
인터넷이 막 보급됐던 시기에는 사용자들이 웹 사이트 자체에 익숙하지 않아서 메뉴에서 어느 부분을 클릭해야 하는지 눈에 띄게 만들어야 했음
지금은 버튼을 눈에 띄게 디자인하지 않아도 어떤 것이 버튼인지 이미 사용자들은 잘 알고 있음
지금은 플랫 디자인이 웹 디자인의 주류 중 하나이고 앞으로도 큰 이변이 없는 한 쭉 주류
이제는 다양한 스마트기기에서 웹을 중심으로 자료를 공유하고 웹에서 직접 작업도 수행함
웹이 이제는 정보를 보여주는 곳을 넘어서 특정 기능을 실행하는 기반 환경이 된 것
특정 기능을 실행하는 기반 환경 -> 플랫폼 / 웹 플랫폼
웹 플랫폼이 되서 표준이 만들어짐
웹 표준 기술을 사용해서 웹 사이트를 제작할 때는 포토샵으로 화려하게 만든 이미지 대신 HTML5의 Canvas 나 SVG로 만든 간결한 이미지를 사용
그리고 모든 기기에서 동작할 수 있도록 CSS나 JS로 처리함
웹 표준에 맞춰 사이트를 제작할 때 플랫 디자인을 사용하면 로딩시간도 줄어들고 대부분의 기기에서 동일하게 보이는 디자인을 만들 수 있음
플랫 디자인 할 때 주의해야 할 점
1. 사용성을 위해 단순하게 디자인하기
2. 색상을 활용해서 강조하기
3. 간결하면서 인상적인 타이포그래피 
 - 플랫 디자인은 주로 글자를 통해 정보를 전달
 - 화려한 특수 글꼴이나 글자에 효과를 많이 넣으면 직관성을 해침
 - 최근에는 빅 타이포그래피가 인기를 끌고 있음

스큐어모피즘 디자인을 쉽게 얘기하면 사용자가 익숙하게 사용해온 것들에 대한 경험을 디지털 환경에서도 독같이 느낄 수 있게 디자인 하는 것(eastafricanbakery.com / 피아노앱)
피아노 앱처럼 피아노를 보고 있는 듯한 느낌을 주는 UI 디자인과 구성이 스큐어모피즘 디자인
스큐어모피즘 디자인 단점 -> 웹 페이지의 기능보다 장식적인 요소에 치중
			정작 중요한 내용을 표시해야 할 공간이 없어지거나 고화질 이미지나 동영상을 사용해야하기 때문에 페이지 로딩 시간이 길어짐
지금처럼 PC뿐만 아니라 다양한 기기에서 웹 사이트에 접속하기 때문에 모든 기기를 고려한 시각적인 요소를 만들기는 불가능
그래서 플랫 디자인이 뜨는 것

머티리얼 디자인 (Material Design) -> 구글이 처음 시작한 디자인 (material.io/design, https://design.google/)
모든 환경에서 사용자 경험(UI/UX)를 하나로 묶기 위한 구글의 디자인 
머티리얼 디자인 vs 플랫 디자인
머티리얼 디자인은 평면에 가상의 빛을 이용한 입체 효과를 추가(공간감, 입체감을 부여)
머티리얼 디자인 라이트 -> 라이브러리 제공(getmdl.io)

카드형 디자인
카드 뉴스, 페이스북, 유튜브



3. 그리드 레이아웃 디자인
반응형 웹 디자인 -> 웹 사이트를 구상할 때 레이아웃을 유연하게 보여줄 수 있도록 고민
그리드 시스템(Grid System)을 활용하면 고민을 줄여줄 수 있음
	-> 페이지나 화면에 정보를 구성할 때 논리적으로 일관성 있게 표현하기 위한 구조
신문, 잡지, 책 등 인쇄 매체(출판, 편집 디자인)에 적용되어 있음
여러 기사들이 각각의 길이에 어울리도록 배치되어 있음
모든 웹사이트에서 그리드 시스템을 적용할 필요는 없지만 전체 디자인의 일관성을 유지하는 데는 그리드 시스템이 편리함

그리드 시스템은 화면 너비를 몇 픽셀로 하는가에 따라 구분
한 화면에 칼럼이 몇 개인가를 기준으로 구분
960 그리드 시스템, 1200 그리드 시스템 은 화면의 너비를 960px, 1200px로 하는 그리드 시스템
12칼럼 그리드, 16칼럼 그리드 는 가로를 12개, 16개의 칼럼으로 나눈 그리드 시스템
(960, 12칼럼 그리드 이런식으로 사용가능)
우리가 보는 대부분의 웹 페이지는 그리드 레이아웃 디자인이 적용되어 있음

그리드 레이아웃 디자인의 특징
1. 시각적으로 안정적인 디자인 : 그리드 레이아웃을 적용한 웹 사이트는 상대적으로 사용자에게 안정감을 줌 / 책, 신문 같은 여러 시각 매체에서 사용하고 있으므로 이미 우리 눈이 그리드 시스템에 익숙해져 거부감 없이 받아들일 수 있는 디자인
2.단순한 웹 디자인 : 실제 내용이 없어도 칼럼들의 너비가 결정되어져 있으므로 레이아웃을 미리 만들어 볼 수 있음
3. 내용을 원하는 대로 배치 : 그리드 레이아웃을 사용하지 않으면 div, p 태그 같은 블록 레벨요소로 한 줄에 하나씩 배치 / 그리드 레이아웃을 사용하면 한 줄에 여러 요소를 배치하도록 기획할 수 있음, 중요한 내용은 좀 더 넓은 공간을 할애하도록 계획할 수 있음

그리드 시스템을 구현하는 4가지 방법
1. 가변 그리드 레이아웃 : 어떤 기기에서도 동일한 레이아웃을 가지면서 기기의 특성에 맞게 웹 컨텐츠를 표시하려면 페이지 안의 각 요소의 너비를 픽셀같은 고정 값이 아니라 백분율 같은 가변값으로 지정하면 됨
	가변(fluid) -> 너비 값이 정해져 있지 않다
	가변 그리드 레이아웃을 사용하면 컨텐츠의 배치는 그대로 유지하면서 너비만 달라지기 때문에 레이아웃 자체가 단순한 사이트에 적합
2. float 그리드 레이아웃 : float속성을 사용해서 그리드 레이아웃을 만들려면 CSS 속성을 완전히 숙지해야 함 / 디자인 경력이 적으면 이 방법으로 만들기가 어려움
3. 플렉스 박스 그리드 레이아웃 : 플렉스 박스 자체가 그리드 레이아웃을 기본으로 하는 시스템
	그리드(박스 / 플렉스 아이템)를 원하는 위치에 배치하는 것,	여유 공간이 생길 경우 너비나 높이를 적절하게 늘리거나 줄일 수 있음, 그리드를 유연하게 조절할 수 있어서 플레서블(Flexible) 박스 레이아웃
	플렉스 박스가 나오기 전에 간단하게 위치 조절만 가능했음, 플렉스 박스가 나오면서 수평이나 수직으로도 배치할 수 있음 / 박스의 크기도 조절
4. CSS의 그리드 레이아웃 : 만드는 단계라 아직 적용 안 되는 브라우저가 많음



4. 원 페이지 사이트(thus.co.kr / bbdo.de / awwwards / 인스타그램)
한 페이지 안에 모든 내용이 다 들어있기 때문에 따로 메뉴를 선택하지 않아도 화면을 위아래 또는 좌우 스크롤을 하면서 보고싶은 내용을 찾아볼 수 있는 디자인
스크롤되는 화면마다 다르게 디자인을 하면 스크롤할 때마다 새로운 내용을 볼 수 있으므로 사용자의 호기심을 자극
인스타그램처럼 오래된 기술이지만 스크롤할 때마다 그 다음 내용 그 다음 내용을 불러와 보여줌 / 내용이 계속 연결되 보이므로 마치 원 페이지 사이트처럼 사용편리성을 높인 것

원 페이지 사이트의 경우 페이지 하나에 주요 컨텐츠들을 모아놓았기 때문에 내비게이션을 추가하는 경우도 있음
내용이 많으면 마지막 내용을 보기 위해서 어쩔 수 없이 슬라이드 또는 스크롤을 많이 해야하는 경우도 있기 때문에 원 페이지에 내용이 너무 많다면 내비게이션을 추가하는게 좋음

원 페이지 사이트는 어떤 사이트에 만드는 게 좋을까?
일반적인 사이트는 메뉴를 클릭하거나 컨텐츠를 클릭하면 그 때 링크된 내용을 서버에서 가져옴
원 페이지 사이트는 스크롤하면서 바로바로 내용이 보여야 하기 때문에 보여줄 내용들을 모두 불러온 다음(로딩) 페이지가 동작함
그래서 페이지 로딩시간이 일반사이트보다 오래 걸릴 수 있음
포털사이트처럼 텍스트, 이미지가 많은 경우에는 적합하지 못함
내용이 많지 않고 여백이 많은 사이트에 적용
간단한 회사 소개 사이트 / 카페, 레스토랑 사이트 / 개인 포트폴리오 사이트 / 이미지 갤러리 사이트 등에 많이 쓰임

jquery 플러그인을 사용 -fullPage.js -Smint - One Page Scroll

패럴랙스 스크롤링 - 원 페이지 사이트에 역동적인 효과를 추가할 때 접목하는 기법(podopodstore.com/mycat)
	스크롤링(Scrolling) 위아래 좌우로 화면을 옮기는 것 / 패럴랙스(Parallax) - 시차, 바라보는 위치에 따라 물체의 위치나 방향이 다르게 보이는 것
	화면이 위아래 또는 좌우로 스크롤될 때 배경과 그 위에 컨텐츠들이 각기 다른 방향으로 움직이거나 동작 시간을 다르게 해서 눈 앞에서 애니메이션 보는 듯한 느낌을 주는 디자인
원 페이지 사이트를 만들 때 항상 같이 접목시키는 기술
패럴랙스 스크롤링 디자인은 일반 웹 사이트에 비해 인터렉티브하고 입체적이라 모든 사이트에 적용하면 좋겠지만 모든 사이트에 어울리지는 못함
패럴랙스 스크롤링은 배경과 웹 컨텐츠들의 시차를 이용한 효과이기 때문에 배경이 중요한 역할을 함
이런 효과를 최고로 만들려면 배경이 잘 드러나야하는데 그러기 위해서는 배경이 복잡한 이미지면 안 되고 텍스트가 적어야 함

	1.스토리텔링 사이트(www.osulloc.com)
	패럴랙스 스크롤링 기법은 가로나 세로 방향으로 화면이 스크롤되면서 컨텐츠가 진행됨 / 스토리에 따라서 내용이 바귀는 스토리텔링사이트에 적합
	2.제품 설명 사이트(www.apple.com/kr, www.samsung.com/sec)
	제품을 개발하는 업체에서 새로운 제품을 출시 -> 사용자에게 새로운 기능과 특징을 알려야 함
	이미지, 텍스트만으로는 전달하기가 어려움 -> 패럴랙스 스크롤링 효과를 추가하면ㄴ 사용자들의 눈길을 끌 수 있음
	3.회사 소개 사이트(renaudrohlinger.com)

jquery플러그인을 사용해서 구현할 수 있음 -Stellar.js -ScrollMagic 등이 유명 (jquery.co 사이트에서도 패럴랙스 스크롤링 관련된 플러그인을 소개해주고 있음)
패럴랙스 스크롤링은 배경과 배경 위의 각 요소가 시간 차이를 두고 서로 다른 속도로 또는 다른 방향으로 움직이면서 동적인 효과를 만드는 것
그래서 자바스크립트 코딩이 필수
우리는 비교적 사용하기 쉬운 parallax-scroll jquery 플러그인 사용해서 구현할 예정



5. 풀 스크린 배경 (story.kakao.com, samjinhealthcare.co.kr, mansionair.co.kr)
화면 전체가 배경 이미지가 사용됐거나 동영상이 사용된 배경 / 꼭 전체가 아니더라도 들어가자마자 배너처럼 큰 이미지가 보이거나 캐러샐(자동 슬라이드)가 보이는 디자인
사이트의 성격을 한 눈에 알아볼 수 있도록 배치하는 큰 이미지를 히어로 이미지(Hero Image)
풀 스크린 배경 디자인을 적용할 때는 패럴랙스 스크롤링 디자인도 함께 적용하는 경우가 많음
풀 스크린 배경은 원 페이지 뿐만 아니라 일반 사이트에서도 자주 사용함
주로 첫 페이지 하나만 한시적으로 풀 스크린 배경을 사용함
풀 스크린 배경은 한 화면에 가득차게 배경이미지나 동영상을 표시
내용이 한 화면 단위로 바뀔 때 적합한 디자인
최근에는 원 페이지 사이트를 많이 만듦
원 페이지 사이트는 클릭이나 스크롤을 이용해서 한 화면씩 이동하는 것이므로 풀 스크린 배경을 많이 활용
원 페이지 사이트에서 풀 스크린 배경을 사용할 때는 div로 보여줄 이미지들을 출력하고 display: none; 으로 감춰뒀다가 필요할 때 display: block; 등의 속성으로 보여주는 것

풀 스크린 배경으로 이미지를 사용할 경우 
1.JPEG, PNG / 2.복잡하거나 화려한 이미지는 배경 위 컨텐츠 가릴 수 있으므로 피할 것 / 3.화질(1200px)이 좋아야 함 / 3.용량 크지 않아야 함(구글에 이미지압축)
background-size / background-image
만약 배경 이미지를 슬라이드 쇼로 표현하고 싶다면 jquery 플러그인 사용 -bxslider -Backstretch.js -Vegas

풀 스크린 배경으로 동영상을 사용할 경우 (mktim.obys.agency)
1.동영상 파일은 용량이 작을수록 좋음 / 2.로딩동안 보여줄 포스터 이미지도 함께 준비 / 3.가급적 오디오는 제거 / 4.

풀 스크린 배경의 단점
1.처음 사이트를 로딩하는데 시간이 다소 소요됨
2.인터넷 속도가 빠르지 않은 지역에서 접속하는 사용자들이 많거나 오래된 브라우저를 사용하는 사용자들이 많다면 풀 스크린 배경을 사용하지 않는게 좋음
3.또한 풀 스크린 배경을 사용할 때는 배경 이미지나 동영상에도 메세지를 담고 있어야 하기 때문에 표시할 내용이 많은 경우 적합하지 않음
4.풀 스크린 배경을 동영상(카카오엔터테인먼트)으로 사용했을 때 모바일 기기 중에서는 브라우저에서 동영상을 재생하지 못하는 기기도 있음 / 동영상 재생하지 못하는 브라우저에서는 동영상 대신 이미지를 보여주도록 설정(포스터 이미지)

고스트 버튼 (https://www.keukenkastenfabriek.nl/)
테두리나 배경이 투명해서 버튼이 아닌 것처럼 페이지 배경이 그대로 드러나는 버튼
풀 스크린 배경에 고스트 버튼을 잘 활용하면 굉장히 효과적으로 내용을 전달할 수 있음
고스트 버튼은 버튼 배경을 투명하게 두고 버튼 위로 마우스를 올렸을 때 배경색이 바귀어서 자연스럽게 클릭을 유도
고스트 버튼은 배경 이미지가 드러나 깨끗하고 깔끔해 보이는 장점
고스트 버튼이 유행하기 전에는 버튼에 그라데이션이나 그림자 등 효과를 매번 넣어야 해서 버튼 만드는 시간이 많이 소요 됐음
고스트 버튼은 간단하게 텍스트를 넣고 border(외곽선)를 넣어서 디자인하기 때문에 구현하기 쉬움
고스트 버튼을 사용할 때는 배경 이미지를 잘못 선정하거나 실수로 잘못 바꾸면 버튼이 보이지 않을 수 있음
또 웹에 익숙하지 않은 사용자는 혼란스러울 수 있음

캐러셀(Caraousel)  (samsung.com/sec, gmarket.co.kr)
수화물 벨트, 회전 목마, ... 무언가 반복해서 회전하는 것을 가리킴
웹 디자인에서 캐러셀은 커너텐츠를 히전하면서 반복적으로 보여주는 디자인 요소를 뜻함
캐러셀은 화면을 움직이지 않아도 가로로 컨텐츠들을 번갈아 보여주기 때문에 많은 양의 컨텐츠를 보여줄 수 있음
장점
- 눈에 가장 잘 띄는 공간에 여러 내용을 배치할 수 있음
대부분 캐러셀을 적용하면 사이트의 처음 접속했을 때 화면의 많은 부분을 차지하게 디자인
단점
- 앞에 있는 컨텐츠는 사용자들이 볼 수 있지만 뒤쪽에 있는 컨텐츠는 노출되지 않을 가능성이 매우 큼
캐러셀은 중요한 것 부터 배치 / 눈에 띄는 내용으로 / 내비게이션과 함께
모든 사용자가 캐러셀 내 컨텐츠를 보는 건 아니기 때문에 페이지 내 캐러셀이 아닌 곳에 캐러셀의 내용을 보여줘야 함



6. 타이포그래피
웹 사이트의 역사가 오래됐기 때문에 웹디자인 관련 기술들은 화려하게 발전했음
다양한 기기에서 텍스트를 보여줘야하기 때문에 웹 페이지에서 사용하는 폰트는 발전이 거의 되지 않았음
타이포그래피 - 글자를 활용한 모든 디자인(글꼴 선택, 글씨 크기, 이미지와 글자를 같이 배치하도록 레이아웃을 만드는 것)
책, 포스터 이런 곳에서 많이 활용되지만 웹에서도 활용됨
기기에 상관 없이 모든 기기에서 우리가 활용한 폰트를 볼 수 있게 해주는 게 웹 폰트(WebFont)임
웹 폰트를 최초 대중화시킨 회사가 구글
웹 디자인의 가장 중요한 부분! -> 어울림 - 사이트 배경과 텍스트 색상이 어울려야 사용자들이 보기 편해함
	흰 배경에는 짙은 색의 어떤 글자도 무난하게 어울리지만 배경색에 색상이 포함되어 있을 때는 글자색을 신중하게 선택해야 함
	배경색과 글자색은 적절히 대비되어야 함 / 적절히라는 말에 기준이 있는게 아니지만 몇 가지 가이드 라인이 있음
	배경색과 텍스트의 색상을 조합해서 디자인에 적용할 때는 색상 대비 체크를 꼭! 해야함 
	색상 대비 체크를 하려면 Color Contrast Check 서비스를 이용하면 됨(https://webaim.org/resources/contrastchecker/)
빅 타이포그래피 - 화면에 커다랗게 표시하는 텍스트(https://www.monsieurcaillou.com/, https://nyondesign.com/)
	1. 단순하게 / 2. 조화를 살피기 / 3. 가독성은 필수
serif : 획의 끝 부분이 돌출된 서체
sans serif : 획의 끝 부분이 돌출되지 않은 서체




