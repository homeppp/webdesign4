인라인요소는 width 안먹음  
inlineblock써서 width 먹여야됨

textarea 크기 조절 못하게 -> resize : none;

after 가상클래스 -> css로 추가할수있는 (content: )텍스트든 뭐든

버블링 -> 한 이벤트가 다른 이벤트로 전파
버블링 멈추기 -> e.preventDefault();, e.stopPropagation(); 이 두개는 mouseenter에 내포되있음

p태그 안에 div 못 씀
div안에 div 쓰는걸로 바꿔야 됨

strong이나 span이나 써서 그라디언트로 형광펜효과

검색기능 활용해서 검색어와 일치하는 텍스트에 밑줄 긋기
웹 그림판의 아이디어만 간단하게 구현(곡선없이 직선만 그려지는 그림판)

button type="button" 안넣으면 submit으로 자동 지정

jquery off속성으로 이벤트 끌수도있음
.html() -> 안에 태그 싹 다 가져옴
html("태그") -> 안에 태그 싹 다지우고 새로 바꿈
.text() -> 안에 텍스트만 가져옴

브레드크럼즈리스트(사이트이동경로) -> 주로 공공기관에서 쓰임

nav 안에 ul li 쓰는게 정석
a태그는 인라인태그라 상하 마진이나 상하 패딩이 적용이 안되서 디스플레이 블록으로하고 적용

기본적으로 p태그가 마진이나 패딩을 가지고 있으므로 상황에 따라 없애고 디자인
일반적으로 노말라이즈 새니타이즈 적용하고 시작하는 것도 괜찮

this를 쓰면 현재이벤트가 활성화된 곳을 알 수 있음

display:none -> 태그 전체 사라져서 다른 태그들이 움직임
visibility:hidden -> 태그는 유지되어 다른 태그들이 안 움직이고 안 보이게 됨

float / display:flex / position 세가지 차이점 정리하기

position: relative에 absolute가 포지션됨, relative가 없으면 부모태그로 계속 올라감

fontsize:0px -> 실수로 글씨 써도 안 나오게 하기 위한

img에 글씨 있는건 alt속성에 그대로 다써줘야함

div height100%줘도 div 크기만큼만, body까지 height100%줘도 body는 자식태그만큼만 감쌈
html height100%까지 줘야 전체화면에 꽉참

appearance: none; -> 아직 개발중인 비표준 CSS3 속성 / select 선택창 기본제공되는 css 사라지게
비표준 속성은 webkit moz 등 써줘야함

로딩중 이미지 css사용해서 만듦 -> preloader, spinner
https://projects.lukehaas.me/css-loaders/

엔터 스페이스 키도 공백으로 되서 인라인 레벨요소 붙일때 주의

nav ul에 마진 패딩 0 주고 시작하는게 좋음
navigation 늘리거나 줄이고 싶을때는 padding 사용

자식 태그가 float 속성을 갖고 있으면 부모 태그에 일반적으로 overflow:hidden 줌

href에 ?파라미터이름=값 -> 현재 페이지로 이동을 하는데 파라미터와 값을 가지고 현재 페이지로 이동해라
url과 관련된 브라우저 객체 모델 -> location

스프라이트 : 여러 개의 이미지를 한 장에 준비해두고 위치값을 조절해 이미지 하나하나를 사용하는 기술
0,0에서 시작하여 크기만큼의 이미지를 보여줌, 그 뒤에 조절은 0,0 기준에서 조절해서 이미지를 보여줘야함

flex: 1 0 auto; -> flex: 확대비율 축소비율 기준크기; 기본값은 0 1 auto
flexflow -> flexdirection(방향) + flexwrap(줄배치)
flexshirink
flexwrap

margin: auto -> margin 최대한 설정
margin: 0 auto -> 가운데 width 값을 줘야 가운데정렬이 완성

order 속성 사용하여 flex 되있는 것들 좌우 바꾸기 가능

zindex로 순서지정하여 위에 올 것을 지정 가능

overflow-y : auto -> y축 넘치면 스크롤 생김
	    scroll -> 무조건 스크롤 생김

사이트맵(SiteMap) : 사이트 내 이동할  수 있는 모든 링크를 모아놓은 페이지

img에 display block 주는 것

:empty -> 해당 태그 내 텍스트 자식태그 없을 경우 잡아주는 상태 선택자

mediaquery -> minwidth - 이 너비 이상일 때
	       maxwidth - 이 너비 이하일 때
	   -> 조건이 맞을 때만 적용되는 CSS, 미디어 쿼리 바깥에 있는 CSS는 무조건(항상) 적용되는 CSS
	   -> 바깥에 모바일 전용 CSS를 두고, 안에 컴퓨터용 CSS 적어두면 모바일 퍼스트 CSS가 됨
	   -> 모바일 기기의 너비가 컴퓨터 화면의 너비보다 좁기 때문에 모바일 디자인이 훨씬 단순함
	      그래서 일반적으로 모바일퍼스트 CSS를 씀
	      이렇게 해야 CSS 짜는 분량이 최소화됨

em은 부모태그 따라가고, rem은 맨위에 html 따라감

text-shadow: 수평방향 수직방향 번짐정도 그림자색; 
	수평방향 + -> 오른쪽 / 수직방향 + -> 아래쪽

드래그 한 텍스트에 css 주려면 ::selection 으로 줌 ( 아직 연구중인 css ::-moz-selection은 따로 줘야)
color, background-color, text-shadow 3가지만 가능

동영상을 배경으로 쓰려면 용량을 작게 해야함 -> 동영상 압축으로 검색해서 압축하고 사용(1mb~3mb)

serif : 삐침 있는 명조 계열의 글꼴
sans-serif : 삐침 없고 굵기가 일정한 고딕 계열의 글꼴
monospace : 글자 폭과 간격이 일정한 글꼴
cursive : 손으로 쓴 것 같은 필기 계열의 글꼴
fantasy : 화려한 글꼴

transform -> rotate : 회전 - 양수 시계방향 / 음수 반시계방향
	     translate : 이동 - x축 이동량을 양수로 주면 왼 -> 오 로 움직임 / y축 이동량을 양수로 주면 위 -> 아래 로 움직임
	     scale : 크기 - 양수로 비율을 주면 확대 / 음수로 비율을 주면 축소 / 비율 1은 원래 크기 ( 100% ) / 비율 1.5는 원래 크기의 50% 더 크게 ( 150% ) / 비율 0.9는 원래 크기의 90% 로 작아지게 ( 10% 축소 시켜라 )
	     skew : 기울임 왜곡 - 
transition: (트랜지션을 줄 속성) (해당 속성의 적용시간) (속도곡선);
transition은 변경 전 선택자에 적용해야 함

filter -> brightness(150%) - 50%만큼 더 밝게
	sepia(80%) - 어두운 갈색
	blur(3px) - 블러처리

img는 border 와 같은 역할을 하는 outline 쓸 수 있음

3차원 변형 - rotateY -> Y축을 기준으로 3차원 회전을 하는 함수

transition 은 처음과 끝 두가지일 때 사용
animation 은 중간 중간에도 스타일 바꿀 수 있음

animation - @keyframes 색바꾸기{ 0%{filter: hue-rotate(0deg)} 100%{filter: hue-rotate(159deg)} } 
    /* 이 태그에 적용할 애니메이션 이름 */
    animation-name: change_color;
    /* 애니메이션 적용 시간 */
    animation-duration: 3s;
    /* 애니메이션 적용 속도 곡선 */
    animation-timing-function: linear;
    /* 애니메이션의 방향(정방향, 역방향) */
    animation-direction: alternate;
    /* 애니메이션 반복횟수(숫자, infinite) */
    animation-iteration-count: infinite;
    /* 애니메이션의 재생 상태 */
    animation-play-state: paused;   running;

ajax 사용해서 로그인 기능을 구현할 때는 인터페이스 문서를 차고
$.ajax({
    url: "member/login",
    data: "ID="+사용자아이디+"&PW"+사용자비밀번호,
    type: "POST"
    success: function(){
	location.href = "메인(첫)페이지 주소"
    },
    error: function(info){
	if(info.status == 404) {
		alert("아이디 또는 비밀번호를 확인하세요.");
	}
    }
});
사용자가 입력한 아이디, 비밀번호를 검증하는 코드도 넣어서
윤곽 만들어놓고 나중에 완성

휴대폰인증 버튼 -> ajax로 휴대폰인증완료만 되게
	$(".phone_check").on("click", function(){
		alert("휴대폰 인증이 완료되었습니다");
		location.href = "회원가입페이지 URL";
	});

자소서 쓸 때 최대한 했던 걸 많이 쓰기 위해 기록해 놓을 것

퍼블리셔
-HTML은 정보 전달이라는 목적을 가진 웹 페이지
-정보를 원하는 사람들에게 정보를 효과적으로 정확하게 전달하려면? 
 웹 페이지를 작성하는 사람이 정확하게 파악하고 정보를 구조적으로 표현할 수 있게 작업
-웹 퍼블리셔는 단순히 디자이너가 만든 웹 페이지를 그대로 웹 브라우저로 옮기는 일만 하지는 않음
-웹 퍼블리셔는 컨텐츠를 다루는 사람 / 웹 페이지에서 전달하려는 내용을 제대로 해석하고 그 컨텐츠 해석에 맞게 HTML, CSS, JS를 활용하는 컨텐츠 전문가
-웹 페이지 속 컨텐츠를 잘 해석해 제대로 된 시맨틱한 마크업이 이뤄지고 검색엔진(네이버, 구글)에 최적화된 페이지를 만들어서 본래 의도했던 기획 의도에 맞는 웹 사이트를 만들 수 있음
-사용자와의 사용성도 고려 -> UI/UX
-퍼블리셔는 사이트를 제작할 때 기획, 디자인, 웹 개발까지 모두 아우르면서 작업해야하기때문에 그 포지션이 매우 중요!!!
-퍼블리셔가 되려면 기술적으로는 포토샵, 일러스트, HTML, CSS, JS, Jquery를 배워야 하지만 사용자의 사용성도 고려해야하므로 UI도 많이 신경써야 함
-한 때 특별한 키워드처럼 붐이었던 UI/UX도 깊게 공부를 해야함
